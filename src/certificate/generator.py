import os
from pathlib import Path
from docx import Document
import logging
from datetime import datetime
import re
import sys
import time

class CertificateGenerator:
    """Class x·ª≠ l√Ω t·∫°o gi·∫•y khen - h·ªó tr·ª£ textbox v√† shapes"""
    
    def __init__(self, template_path, logger=None, config=None):
        self.template_path = Path(template_path)
        self.logger = logger or logging.getLogger(__name__)
        self.config = config
        
        if config:
            self.issued_by = config.get('CERTIFICATE', 'issued_by', fallback='Ban H∆∞·ªõng D·∫´n GƒêPT')
            self.issued_at = config.get('CERTIFICATE', 'issued_at', fallback='ƒê√† N·∫µng')
            self.issued_date = config.get('CERTIFICATE', 'issued_date', fallback='').strip()
            self.no_dharma_name = config.get('CERTIFICATE', 'no_dharma_name', fallback='Kh√¥ng c√≥')
            self.custom_placeholders = {}
            if config.has_section('PLACEHOLDERS'):
                for key, value in config.items('PLACEHOLDERS'):
                    placeholder_key = f'<<{key}>>'
                    self.custom_placeholders[placeholder_key] = value
        else:
            self.issued_by = 'Ban H∆∞·ªõng D·∫´n GƒêPT'
            self.issued_at = 'ƒê√† N·∫µng'
            self.issued_date = ''
            self.no_dharma_name = 'Kh√¥ng c√≥'
            self.custom_placeholders = {}
        
        if not self.template_path.exists():
            raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y template: {template_path}")
    
    def check_template_placeholders(self):
        """Ki·ªÉm tra v√† li·ªát k√™ c√°c placeholder trong template - PHI√äN B·∫¢N SI√äU N√ÇNG C·∫§P"""
        try:
            doc = Document(str(self.template_path))
            placeholders_found = set()
            debug_info = []
            
            # H√†m t√¨m placeholder trong text - h·ªó tr·ª£ c·∫£ placeholder b·ªã t√°ch
            def find_placeholders_in_text(text):
                import re
                pattern = r'<<[^>]+>>'
                return re.findall(pattern, text)
            
            def find_placeholders_in_paragraph_runs(paragraph, location=""):
                """T√¨m placeholder trong paragraph c√≥ th·ªÉ b·ªã t√°ch th√†nh nhi·ªÅu run"""
                # Gh√©p t·∫•t c·∫£ text t·ª´ c√°c run
                full_text = ''.join(run.text for run in paragraph.runs)
                
                # Debug: log chi ti·∫øt v·ªÅ runs
                if paragraph.runs and ('<<' in full_text or '>>' in full_text):
                    debug_info.append(f"{location} - Full text: '{full_text}'")
                    for i, run in enumerate(paragraph.runs):
                        if run.text.strip():
                            debug_info.append(f"  Run {i}: '{run.text}'")
                
                return find_placeholders_in_text(full_text)
            
            # Ki·ªÉm tra trong paragraphs
            for i, para in enumerate(doc.paragraphs):
                # Ki·ªÉm tra c·∫£ text th∆∞·ªùng v√† text t·ª´ runs
                found_normal = find_placeholders_in_text(para.text)
                found_runs = find_placeholders_in_paragraph_runs(para, f"Para {i}")
                placeholders_found.update(found_normal)
                placeholders_found.update(found_runs)
            
            # Ki·ªÉm tra trong tables - CHI TI·∫æT H∆†N
            for table_idx, table in enumerate(doc.tables):
                debug_info.append(f"=== TABLE {table_idx + 1} ===")
                for row_idx, row in enumerate(table.rows):
                    for cell_idx, cell in enumerate(row.cells):
                        # Log text trong cell
                        cell_text = cell.text.strip()
                        if cell_text and ('<<' in cell_text or '>>' in cell_text):
                            debug_info.append(f"Cell [{row_idx},{cell_idx}]: '{cell_text}'")
                        
                        for para_idx, para in enumerate(cell.paragraphs):
                            found_normal = find_placeholders_in_text(para.text)
                            found_runs = find_placeholders_in_paragraph_runs(
                                para, f"Table{table_idx+1} Cell[{row_idx},{cell_idx}] Para{para_idx}"
                            )
                            placeholders_found.update(found_normal)
                            placeholders_found.update(found_runs)
            
            # Ki·ªÉm tra trong headers/footers
            for section_idx, section in enumerate(doc.sections):
                if section.header:
                    for para_idx, para in enumerate(section.header.paragraphs):
                        found_normal = find_placeholders_in_text(para.text)
                        found_runs = find_placeholders_in_paragraph_runs(
                            para, f"Header{section_idx} Para{para_idx}"
                        )
                        placeholders_found.update(found_normal)
                        placeholders_found.update(found_runs)
                if section.footer:
                    for para_idx, para in enumerate(section.footer.paragraphs):
                        found_normal = find_placeholders_in_text(para.text)
                        found_runs = find_placeholders_in_paragraph_runs(
                            para, f"Footer{section_idx} Para{para_idx}"
                        )
                        placeholders_found.update(found_normal)
                        placeholders_found.update(found_runs)
            
            if self.logger:
                if placeholders_found:
                    self.logger.info("üìã Placeholders t√¨m th·∫•y trong template:")
                    for p in sorted(placeholders_found):
                        self.logger.info(f"   - {p}")
                else:
                    self.logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y placeholder n√†o trong template!")
                    self.logger.info("üîç Debug chi ti·∫øt:")
                    for info in debug_info[:20]:  # Ch·ªâ hi·ªÉn th·ªã 20 d√≤ng ƒë·∫ßu
                        self.logger.info(f"   {info}")
                    if len(debug_info) > 20:
                        self.logger.info(f"   ... v√† {len(debug_info) - 20} d√≤ng n·ªØa")
            
            return list(placeholders_found)
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"L·ªói ki·ªÉm tra template: {e}")
            return []

    def create_certificate(self, ho_ten, phap_danh="", nam_sinh="", don_vi="", output_file=None):
        """T·∫°o gi·∫•y khen - ∆Øu ti√™n python-docx nh∆∞ phi√™n b·∫£n c≈©"""
        try:
            # X·ª≠ l√Ω d·ªØ li·ªáu
            phap_danh_display = phap_danh.strip() if phap_danh.strip() else self.no_dharma_name
            
            if self.issued_date:
                current_date = self.issued_date
            else:
                current_date = datetime.now().strftime("ng√†y %d th√°ng %m nƒÉm %Y")
            
            if self.logger:
                self.logger.info(f"üîÑ ƒêang x·ª≠ l√Ω: {ho_ten}")
            
            # T·∫°o mapping v·ªõi format ƒê√öNG nh∆∞ trong Word template
            replacements = {
                '<<Ho_va_ten>>': ho_ten,
                '<<Phap_danh>>': phap_danh_display,
                '<<Nam_sinh>>': str(nam_sinh) if nam_sinh else '',
                '<<Don_vi>>': don_vi,
                '<<Do>>': self.issued_by,
                '<<Tai>>': self.issued_at,
                '<<Ngay>>': current_date,
            }
            
            # Th√™m c√°c custom placeholders
            for key, value in self.custom_placeholders.items():
                replacements[key] = value
            
            if self.logger:
                self.logger.debug("üìÑ Mapping s·∫Ω s·ª≠ d·ª•ng:")
                for k, v in replacements.items():
                    self.logger.debug(f"  {k} ‚Üí {v}")
            
            # Ki·ªÉm tra template tr∆∞·ªõc khi x·ª≠ l√Ω
            template_placeholders = self.check_template_placeholders()
            
            # ∆Øu ti√™n d√πng python-docx nh∆∞ phi√™n b·∫£n c≈© ƒë√£ ho·∫°t ƒë·ªông
            success = self._use_python_docx_advanced_v2(replacements, output_file)
            
            # N·∫øu python-docx th·∫•t b·∫°i v√† tr√™n Windows, th·ª≠ Word COM
            if not success and sys.platform == "win32":
                if self.logger:
                    self.logger.warning("‚ö†Ô∏è python-docx th·∫•t b·∫°i, th·ª≠ Word COM...")
                time.sleep(0.5)
                success = self._use_word_com_simple(replacements, output_file)
            
            return success
                
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå L·ªói t·∫°o gi·∫•y khen cho {ho_ten}: {str(e)}")
            return False

    def _use_python_docx_advanced_v2(self, replacements, output_file):
        """S·ª≠ d·ª•ng python-docx v·ªõi x·ª≠ l√Ω run-level c·∫£i ti·∫øn - PHI√äN B·∫¢N 2"""
        try:
            if self.logger:
                self.logger.info("üîß ƒêang s·ª≠ d·ª•ng python-docx (v2)...")
            
            # ƒê·ªçc template
            doc = Document(str(self.template_path))
            total_replacements = 0
            
            def replace_in_paragraph_v2(paragraph):
                """Thay th·∫ø placeholder trong paragraph - THU·∫¨T TO√ÅN M·ªöI"""
                if not paragraph.runs:
                    return False
                
                # B∆∞·ªõc 1: Gh√©p t·∫•t c·∫£ text l·∫°i v√† t√¨m placeholder
                full_text = ''.join(run.text for run in paragraph.runs)
                
                # Ki·ªÉm tra c√≥ placeholder kh√¥ng
                has_placeholder = False
                new_text = full_text
                for placeholder, replacement in replacements.items():
                    if placeholder in new_text:
                        new_text = new_text.replace(placeholder, str(replacement) if replacement else '')
                        has_placeholder = True
                        if self.logger:
                            self.logger.debug(f"   Found & Replaced: {placeholder} ‚Üí {replacement}")
                
                # N·∫øu kh√¥ng c√≥ placeholder, kh√¥ng l√†m g√¨
                if not has_placeholder:
                    return False
                
                # B∆∞·ªõc 2: L∆∞u format c·ªßa run ƒë·∫ßu ti√™n (ho·∫∑c run c√≥ text)
                first_run_with_text = None
                for run in paragraph.runs:
                    if run.text.strip():
                        first_run_with_text = run
                        break
                
                if not first_run_with_text:
                    first_run_with_text = paragraph.runs[0]
                
                # L∆∞u format
                original_format = {
                    'bold': first_run_with_text.bold,
                    'italic': first_run_with_text.italic,
                    'underline': first_run_with_text.underline,
                }
                
                # L∆∞u font n·∫øu c√≥
                try:
                    original_format['font_name'] = first_run_with_text.font.name
                    original_format['font_size'] = first_run_with_text.font.size
                    original_format['font_color'] = first_run_with_text.font.color.rgb
                except:
                    pass
                
                # B∆∞·ªõc 3: X√≥a t·∫•t c·∫£ runs c≈©
                paragraph.clear()
                
                # B∆∞·ªõc 4: T·∫°o run m·ªõi v·ªõi text ƒë√£ thay th·∫ø
                new_run = paragraph.add_run(new_text)
                
                # B∆∞·ªõc 5: √Åp d·ª•ng l·∫°i format
                try:
                    if original_format.get('bold') is not None:
                        new_run.bold = original_format['bold']
                    if original_format.get('italic') is not None:
                        new_run.italic = original_format['italic']
                    if original_format.get('underline') is not None:
                        new_run.underline = original_format['underline']
                    if original_format.get('font_name'):
                        new_run.font.name = original_format['font_name']
                    if original_format.get('font_size'):
                        new_run.font.size = original_format['font_size']
                    if original_format.get('font_color'):
                        new_run.font.color.rgb = original_format['font_color']
                except Exception as e:
                    if self.logger:
                        self.logger.debug(f"Kh√¥ng th·ªÉ √°p d·ª•ng format: {e}")
                
                return True
            
            # X·ª≠ l√Ω t·∫•t c·∫£ paragraphs
            for para in doc.paragraphs:
                if replace_in_paragraph_v2(para):
                    total_replacements += 1
            
            # X·ª≠ l√Ω trong tables - C·∫¢I TI·∫æN ƒê·∫∂C BI·ªÜT CHO TABLE
            for table_idx, table in enumerate(doc.tables):
                if self.logger:
                    self.logger.debug(f"ƒêang x·ª≠ l√Ω table {table_idx + 1}...")
                
                for row_idx, row in enumerate(table.rows):
                    for cell_idx, cell in enumerate(row.cells):
                        # X·ª≠ l√Ω t·ª´ng paragraph trong cell
                        for para_idx, para in enumerate(cell.paragraphs):
                            # Debug: hi·ªÉn th·ªã text trong cell
                            if para.text.strip() and '<<' in para.text:
                                if self.logger:
                                    self.logger.debug(f"  Cell [{row_idx},{cell_idx}] para {para_idx}: '{para.text}'")
                            
                            if replace_in_paragraph_v2(para):
                                total_replacements += 1
                                if self.logger:
                                    self.logger.debug(f"  ‚úÖ Replaced in table cell [{row_idx},{cell_idx}]")
                        
                        # Th√™m: X·ª≠ l√Ω tr·ª±c ti·∫øp text trong cell (backup method)
                        try:
                            cell_text = cell.text
                            if any(placeholder in cell_text for placeholder in replacements.keys()):
                                if self.logger:
                                    self.logger.debug(f"  üîÑ Trying direct cell text replacement...")
                                # Th·ª≠ thay th·∫ø tr·ª±c ti·∫øp trong cell text (√≠t hi·ªáu qu·∫£ nh∆∞ng c√≥ th·ªÉ work)
                                new_cell_text = cell_text
                                for placeholder, replacement in replacements.items():
                                    if placeholder in new_cell_text:
                                        new_cell_text = new_cell_text.replace(placeholder, str(replacement) if replacement else '')
                                
                                # N·∫øu c√≥ thay ƒë·ªïi, clear cell v√† add l·∫°i
                                if new_cell_text != cell_text:
                                    # Clear t·∫•t c·∫£ paragraphs trong cell
                                    for para in cell.paragraphs[::-1]:  # Reverse ƒë·ªÉ tr√°nh index issues
                                        if len(cell.paragraphs) > 1:
                                            cell._element.remove(para._element)
                                    
                                    # Add text m·ªõi v√†o paragraph ƒë·∫ßu ti√™n
                                    if cell.paragraphs:
                                        cell.paragraphs[0].clear()
                                        cell.paragraphs[0].add_run(new_cell_text)
                                    else:
                                        # T·∫°o paragraph m·ªõi n·∫øu c·∫ßn
                                        new_para = cell.add_paragraph()
                                        new_para.add_run(new_cell_text)
                                    
                                    total_replacements += 1
                                    if self.logger:
                                        self.logger.debug(f"  ‚úÖ Direct cell replacement successful")
                        except Exception as e:
                            if self.logger:
                                self.logger.debug(f"  ‚ö†Ô∏è Direct cell replacement failed: {e}")
            
            # X·ª≠ l√Ω headers v√† footers
            for section in doc.sections:
                # Header
                if section.header:
                    for para in section.header.paragraphs:
                        if replace_in_paragraph_v2(para):
                            total_replacements += 1
                
                # Footer
                if section.footer:
                    for para in section.footer.paragraphs:
                        if replace_in_paragraph_v2(para):
                            total_replacements += 1
            
            if self.logger:
                self.logger.info(f"üìä python-docx v2 - T·ªïng thay th·∫ø: {total_replacements} v·ªã tr√≠")
            
            # L∆∞u file
            if output_file:
                # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
                output_file = Path(output_file)
                output_file.parent.mkdir(parents=True, exist_ok=True)
                
                # L∆∞u document
                doc.save(str(output_file))
                
                if self.logger:
                    self.logger.info(f"‚úÖ T·∫°o th√†nh c√¥ng b·∫±ng python-docx v2: {output_file.name}")
                
                return True if total_replacements > 0 else False
            
            return False
                
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå L·ªói python-docx v2: {e}")
            return False

    def _use_python_docx_advanced(self, replacements, output_file):
        """S·ª≠ d·ª•ng python-docx v·ªõi x·ª≠ l√Ω run-level c·∫£i ti·∫øn - PHI√äN B·∫¢N C≈® (backup)"""
        try:
            if self.logger:
                self.logger.info("üîß ƒêang s·ª≠ d·ª•ng python-docx...")
            
            # ƒê·ªçc template
            doc = Document(str(self.template_path))
            total_replacements = 0
            
            # H√†m thay th·∫ø text trong paragraph - x·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p placeholder b·ªã t√°ch
            def replace_in_paragraph(paragraph):
                """Thay th·∫ø placeholder trong paragraph, x·ª≠ l√Ω c·∫£ khi b·ªã t√°ch th√†nh nhi·ªÅu run"""
                if not paragraph.runs:
                    return False
                    
                # L∆∞u format c·ªßa t·ª´ng run
                run_formats = []
                for run in paragraph.runs:
                    run_formats.append({
                        'bold': run.bold,
                        'italic': run.italic,
                        'underline': run.underline,
                        'font_name': run.font.name,
                        'font_size': run.font.size,
                    })
                
                # Gh√©p t·∫•t c·∫£ text l·∫°i
                full_text = ''.join(run.text for run in paragraph.runs)
                
                # Ki·ªÉm tra v√† thay th·∫ø
                new_text = full_text
                replaced = False
                for placeholder, replacement in replacements.items():
                    if placeholder in new_text:
                        new_text = new_text.replace(placeholder, str(replacement) if replacement else '')
                        replaced = True
                        if self.logger:
                            self.logger.debug(f"   Replaced: {placeholder} ‚Üí {replacement}")
                
                # N·∫øu c√≥ thay ƒë·ªïi, c·∫≠p nh·∫≠t paragraph
                if replaced:
                    # Gi·ªØ format c·ªßa run ƒë·∫ßu ti√™n
                    first_format = run_formats[0] if run_formats else None
                    
                    # X√≥a t·∫•t c·∫£ runs c≈©
                    paragraph.clear()
                    
                    # T·∫°o run m·ªõi v·ªõi text ƒë√£ thay th·∫ø
                    new_run = paragraph.add_run(new_text)
                    
                    # √Åp d·ª•ng l·∫°i format
                    if first_format:
                        if first_format['bold'] is not None:
                            new_run.bold = first_format['bold']
                        if first_format['italic'] is not None:
                            new_run.italic = first_format['italic']
                        if first_format['underline'] is not None:
                            new_run.underline = first_format['underline']
                        if first_format['font_name']:
                            new_run.font.name = first_format['font_name']
                        if first_format['font_size']:
                            new_run.font.size = first_format['font_size']
                
                return replaced
            
            # X·ª≠ l√Ω t·∫•t c·∫£ paragraphs
            for para in doc.paragraphs:
                if replace_in_paragraph(para):
                    total_replacements += 1
            
            # X·ª≠ l√Ω trong tables
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        for para in cell.paragraphs:
                            if replace_in_paragraph(para):
                                total_replacements += 1
            
            # X·ª≠ l√Ω headers v√† footers
            for section in doc.sections:
                # Header
                if section.header:
                    for para in section.header.paragraphs:
                        if replace_in_paragraph(para):
                            total_replacements += 1
                
                # Footer
                if section.footer:
                    for para in section.footer.paragraphs:
                        if replace_in_paragraph(para):
                            total_replacements += 1
            
            if self.logger:
                self.logger.info(f"üìä python-docx - T·ªïng thay th·∫ø: {total_replacements} v·ªã tr√≠")
            
            # L∆∞u file
            if output_file:
                # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
                output_file = Path(output_file)
                output_file.parent.mkdir(parents=True, exist_ok=True)
                
                # L∆∞u document
                doc.save(str(output_file))
                
                if self.logger:
                    self.logger.info(f"‚úÖ T·∫°o th√†nh c√¥ng b·∫±ng python-docx: {output_file.name}")
                
                return True if total_replacements > 0 else False
            
            return False
                
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå L·ªói python-docx: {e}")
            return False

    def _use_word_com_simple(self, replacements, output_file):
        """S·ª≠ d·ª•ng Word COM v·ªõi DEBUG MODE - hi·ªÉn th·ªã Word ƒë·ªÉ xem chuy·ªán g√¨ x·∫£y ra"""
        try:
            import win32com.client
        except ImportError:
            if self.logger:
                self.logger.warning("‚ö†Ô∏è Kh√¥ng c√≥ win32com")
            return False

        word = None
        doc = None
        try:
            if self.logger:
                self.logger.info("üîß ƒêang s·ª≠ d·ª•ng Word COM DEBUG MODE...")

            # Kh·ªüi t·∫°o Word
            word = win32com.client.Dispatch("Word.Application")
            word.Visible = True  # HI·ªÇN TH·ªä Word ƒë·ªÉ debug
            word.DisplayAlerts = 0
            
            # M·ªü template g·ªëc tr·ª±c ti·∫øp (kh√¥ng copy)
            doc = word.Documents.Open(
                str(self.template_path.resolve()),
                ReadOnly=False,
                AddToRecentFiles=False,
                Visible=True
            )
            
            if self.logger:
                self.logger.info(f"üìÑ Document opened: {doc.Name}")
                self.logger.info("üîç Word ƒëang hi·ªÉn th·ªã - b·∫°n c√≥ th·ªÉ xem document!")
                
            # ƒê·ª£i user x√°c nh·∫≠n
            input("üëÅÔ∏è Nh·∫•n Enter sau khi b·∫°n ƒë√£ xem document trong Word...")
            
            total_replacements = 0
            
            # Th·ª≠ replace t·ª´ng placeholder m·ªôt v√† ki·ªÉm tra ngay
            for placeholder, replacement in replacements.items():
                try:
                    if self.logger:
                        self.logger.info(f"üîÑ ƒêang x·ª≠ l√Ω: {placeholder}")
                    
                    # S·ª≠ d·ª•ng Selection ƒë·ªÉ thay th·∫ø (gi·ªëng nh∆∞ user l√†m th·ªß c√¥ng)
                    selection = word.Selection
                    find = selection.Find
                    
                    # Reset v·ªÅ ƒë·∫ßu document
                    selection.HomeKey(6)  # wdStory = 6
                    
                    # C·∫•u h√¨nh find
                    find.ClearFormatting()
                    find.Replacement.ClearFormatting()
                    find.Text = placeholder
                    find.Replacement.Text = str(replacement) if replacement else ''
                    find.Forward = True
                    find.Wrap = 1  # wdFindContinue = 1
                    find.Format = False
                    find.MatchCase = False
                    find.MatchWholeWord = False
                    
                    # Th·ª±c hi·ªán replace all
                    replaced = find.Execute(Replace=2)  # wdReplaceAll = 2
                    
                    if replaced:
                        total_replacements += 1
                        if self.logger:
                            self.logger.info(f"   ‚úÖ {placeholder} ‚Üí {replacement}")
                        
                        # ƒê·ª£i ƒë·ªÉ user c√≥ th·ªÉ th·∫•y thay ƒë·ªïi
                        input(f"üëÄ ƒê√£ thay th·∫ø {placeholder}. Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    else:
                        if self.logger:
                            self.logger.warning(f"   ‚ùå Kh√¥ng t√¨m th·∫•y: {placeholder}")
                
                except Exception as e:
                    if self.logger:
                        self.logger.error(f"   ‚ö†Ô∏è L·ªói x·ª≠ l√Ω {placeholder}: {e}")
            
            if self.logger:
                self.logger.info(f"üìä Word COM DEBUG - T·ªïng thay th·∫ø: {total_replacements} v·ªã tr√≠")
            
            # ƒê·ª£i user ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
            input("üîç Ki·ªÉm tra document cu·ªëi c√πng trong Word. Nh·∫•n Enter ƒë·ªÉ l∆∞u...")
            
            # L∆∞u file
            if output_file:
                output_file = Path(output_file)
                output_file.parent.mkdir(parents=True, exist_ok=True)
                doc.SaveAs2(str(output_file.resolve()))
                if self.logger:
                    self.logger.info(f"üíæ ƒê√£ l∆∞u file: {output_file.name}")
            
            return True if total_replacements > 0 else False
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå L·ªói Word COM DEBUG: {e}")
            return False
        finally:
            # ƒê√≥ng document v√† Word
            try:
                if doc:
                    doc.Close(False)
            except:
                pass
            try:
                if word:
                    word.Quit()
            except:
                pass

    def batch_create(self, data_list, output_folder):
        """T·∫°o nhi·ªÅu gi·∫•y khen c√πng l√∫c"""
        output_folder = Path(output_folder)
        output_folder.mkdir(parents=True, exist_ok=True)
        
        success_count = 0
        failed_list = []
        
        for idx, data in enumerate(data_list, 1):
            try:
                ho_ten = data.get('ho_ten', '')
                phap_danh = data.get('phap_danh', '')
                nam_sinh = data.get('nam_sinh', '')
                don_vi = data.get('don_vi', '')
                
                safe_name = ho_ten.replace(' ', '_').replace('/', '_').replace('\\', '_')
                output_file = output_folder / f"{idx:03d}_{safe_name}.docx"
                
                if self.create_certificate(ho_ten, phap_danh, nam_sinh, don_vi, output_file):
                    success_count += 1
                else:
                    failed_list.append(ho_ten)
                    
            except Exception as e:
                failed_list.append(data.get('ho_ten', f'Record {idx}'))
                if self.logger:
                    self.logger.error(f"‚ùå L·ªói x·ª≠ l√Ω {data.get('ho_ten', '')}: {str(e)}")
        
        return success_count, failed_list