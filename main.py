import os
import sys
import pandas as pd
from docx import Document
from docx2pdf import convert
import shutil
from datetime import datetime
import configparser
from pathlib import Path

# Import c√°c module t·ª´ src
from src.certificate.generator import CertificateGenerator
from src.io.file_handler import create_folders, validate_files
from src.logging.logger_setup import setup_logger

def load_config():
    """ƒê·ªçc c·∫•u h√¨nh t·ª´ file config.ini"""
    config = configparser.ConfigParser()
    config_file = 'config.ini'
    
    if os.path.exists(config_file):
        config.read(config_file, encoding='utf-8')
        print("üìÉ ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ config.ini")
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y config.ini, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh")
    
    return config

def safe_str(value):
    """Chuy·ªÉn ƒë·ªïi gi√° tr·ªã sang string an to√†n"""
    if pd.isna(value) or value is None:
        return ""
    if isinstance(value, (int, float)):
        if isinstance(value, float) and value.is_integer():
            return str(int(value))
        return str(value)
    return str(value).strip()

def display_config_info(config):
    """Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh placeholder"""
    print("\nüìã TH√îNG TIN C·∫§U H√åNH PLACEHOLDER:")
    print("-" * 70)
    print("T·ª´ Excel (d·ªØ li·ªáu ng∆∞·ªùi nh·∫≠n):")
    print("  ‚Ä¢ <<Ho_va_ten>> ‚Üí H·ªç v√† t√™n")
    print("  ‚Ä¢ <<Phap_danh>> ‚Üí Ph√°p danh (n·∫øu tr·ªëng s·∫Ω hi·ªÉn th·ªã 'Kh√¥ng c√≥')")
    print("  ‚Ä¢ <<Nam_sinh>> ‚Üí NƒÉm sinh")
    print("  ‚Ä¢ <<Don_vi>> ‚Üí ƒê∆°n v·ªã")
    
    print("\nT·ª´ Config (c√≥ th·ªÉ ch·ªânh s·ª≠a trong config.ini):")
    issued_by = config.get('CERTIFICATE', 'issued_by', fallback='Ban H∆∞·ªõng D·∫´n GƒêPT')
    issued_at = config.get('CERTIFICATE', 'issued_at', fallback='ƒê√† N·∫µng')
    issued_date = config.get('CERTIFICATE', 'issued_date', fallback='')
    
    print(f"  ‚Ä¢ <<Do>> ‚Üí {issued_by}")
    print(f"  ‚Ä¢ <<Tai>> ‚Üí {issued_at}")
    print(f"  ‚Ä¢ <<Ngay>> ‚Üí {issued_date if issued_date else 'Ng√†y hi·ªán t·∫°i (t·ª± ƒë·ªông)'}")
    
    # Hi·ªÉn th·ªã placeholder t√πy ch·ªânh n·∫øu c√≥
    if config.has_section('PLACEHOLDERS'):
        print("\nPlaceholder t√πy ch·ªânh:")
        for key, value in config.items('PLACEHOLDERS'):
            print(f"  ‚Ä¢ <<{key}>> ‚Üí {value}")
    
    print("-" * 70)
    print("üìÑ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TRONG WORD TEMPLATE:")
    print("‚Ä¢ ƒê·∫∑t c√°c placeholder tr√™n v√†o file Word template (*.docx)")
    print("‚Ä¢ V√≠ d·ª• trong Word: 'Ch·ª©ng nh·∫≠n: <<Ho_va_ten>>'")
    print("‚Ä¢ V√≠ d·ª• trong Word: 'Ph√°p danh: <<Phap_danh>>'")
    print("‚Ä¢ C√≥ th·ªÉ ƒë·∫∑t ·ªü b·∫•t k·ª≥ ƒë√¢u: paragraph, table, header, footer")
    print("üì± OUTPUT: Ch·ªâ t·∫°o file PDF (kh√¥ng t·∫°o DOCX)")
    print("-" * 70)

def convert_to_pdf_safe(docx_path, pdf_path, logger):
    """Chuy·ªÉn ƒë·ªïi DOCX sang PDF an to√†n"""
    try:
        docx_path = Path(docx_path)
        pdf_path = Path(pdf_path)
        
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c output t·ªìn t·∫°i
        pdf_path.parent.mkdir(parents=True, exist_ok=True)
        
        if sys.platform == "win32":
            # Windows: S·ª≠ d·ª•ng docx2pdf (c·∫ßn MS Word)
            try:
                convert(str(docx_path), str(pdf_path))
                logger.info(f"‚úÖ Chuy·ªÉn PDF th√†nh c√¥ng: {pdf_path.name}")
                return True
            except Exception as e:
                logger.error(f"‚ùå L·ªói chuy·ªÉn PDF b·∫±ng docx2pdf: {str(e)}")
                return False
            # Linux/Mac: S·ª≠ d·ª•ng LibreOffice (n·∫øu c√≥ c√†i)
            try:
                import subprocess
                cmd = [
                    'libreoffice', '--headless', '--convert-to', 'pdf',
                    '--outdir', str(pdf_path.parent), str(docx_path)
                ]
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
                if result.returncode == 0:
                    logger.info(f"‚úÖ Chuy·ªÉn PDF th√†nh c√¥ng b·∫±ng LibreOffice: {pdf_path.name}")
                    return True
                else:
                    logger.error(f"‚ùå LibreOffice l·ªói: {result.stderr}")
                    return False
            except (subprocess.TimeoutExpired, FileNotFoundError) as e:
                logger.error(f"‚ùå Kh√¥ng th·ªÉ d√πng LibreOffice: {str(e)}")
                return False
    except Exception as e:
        logger.error(f"‚ùå L·ªói chuy·ªÉn PDF: {str(e)}")
        return False

def main():
    """H√†m ch√≠nh c·ªßa ch∆∞∆°ng tr√¨nh"""
    
    # Kh·ªüi t·∫°o logger
    logger = setup_logger("CertificateGenerator", "INFO", True)
    
    print("=" * 70)
    print("üìÑ TOOL T·∫†O GI·∫§Y KHEN T·ª∞ ƒê·ªòNG - CH·ªà PDF")
    print("   Gia ƒê√¨nh Ph·∫≠t T·ª≠ Vi·ªát Nam - TP ƒê√† N·∫µng")
    print("   üìã S·ª≠ d·ª•ng placeholder format: <<Ten_placeholder>>")
    print("=" * 70)
    
    # ƒê·ªçc c·∫•u h√¨nh
    config = load_config()
    
    # Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh
    display_config_info(config)
    
    # Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n
    base_dir = Path.cwd()
    input_folder = base_dir / "input"
    output_folder = base_dir / "output"
    template_folder = base_dir / "templates"
    temp_folder = base_dir / "temp"
    
    # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
    create_folders([input_folder, output_folder, template_folder, temp_folder])
    
    # Ki·ªÉm tra file template
    template_files = list(template_folder.glob("*.docx"))
    if not template_files:
        logger.error("‚ùå Kh√¥ng t√¨m th·∫•y file ph√¥i gi·∫•y khen (.docx) trong th∆∞ m·ª•c templates!")
        print("\nüí° H∆∞·ªõng d·∫´n:")
        print("1. ƒê·∫∑t file ph√¥i gi·∫•y khen (ƒë·ªãnh d·∫°ng .docx) v√†o th∆∞ m·ª•c 'templates'")
        print("2. File ph√¥i c·∫ßn ch·ª©a c√°c placeholder:")
        print("   - <<Ho_va_ten>>, <<Phap_danh>>, <<Nam_sinh>>, <<Don_vi>>")
        print("   - <<Do>>, <<Tai>>, <<Ngay>>")
        print("3. Ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh")
        return
    
    template_file = template_files[0]
    logger.info(f"üìÑ S·ª≠ d·ª•ng ph√¥i: {template_file.name}")
    
    # Ki·ªÉm tra file Excel
    excel_files = list(input_folder.glob("*.xlsx")) + list(input_folder.glob("*.xls"))
    if not excel_files:
        logger.error("‚ùå Kh√¥ng t√¨m th·∫•y file danh s√°ch Excel trong th∆∞ m·ª•c input!")
        print("\nüí° H∆∞·ªõng d·∫´n:")
        print("1. ƒê·∫∑t file Excel ch·ª©a danh s√°ch v√†o th∆∞ m·ª•c 'input'")
        print("2. File Excel c·∫ßn c√≥ c√°c c·ªôt: H·ªç v√† t√™n, Ph√°p danh, NƒÉm sinh, ƒê∆°n v·ªã")
        print("3. Ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh")
        return
    
    excel_file = excel_files[0]
    logger.info(f"üìä ƒê·ªçc danh s√°ch t·ª´: {excel_file.name}")
    
    try:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
        header_row = config.getint('EXCEL', 'header_row', fallback=5) - 1  # Convert to 0-based index
        df = pd.read_excel(excel_file, header=header_row)
        
        # L·ªçc v√† l√†m s·∫°ch d·ªØ li·ªáu
        df = df.dropna(subset=['H·ªç v√† t√™n'])  # B·ªè c√°c h√†ng kh√¥ng c√≥ t√™n
        
        # ƒê·ªïi t√™n c·ªôt cho d·ªÖ x·ª≠ l√Ω
        column_mapping = {
            'Tt': 'STT',
            'H·ªç v√† t√™n': 'HoTen',
            'Ph√°p danh': 'PhapDanh', 
            'NƒÉm sinh': 'NamSinh',
            'ƒê∆°n v·ªã': 'DonVi',
            'ƒêi·ªÉm': 'Diem',
            'Ghi ch√∫': 'GhiChu'
        }
        
        # Ch·ªâ ƒë·ªïi t√™n c√°c c·ªôt t·ªìn t·∫°i
        existing_columns = {k: v for k, v in column_mapping.items() if k in df.columns}
        df = df.rename(columns=existing_columns)
        
        # Ki·ªÉm tra c·ªôt filter (n·∫øu c√≥ c·∫•u h√¨nh)
        filter_column = config.get('EXCEL', 'filter_column', fallback='')
        filter_value = config.get('EXCEL', 'filter_value', fallback='')
        
        if filter_column and filter_value and 'GhiChu' in df.columns:
            df_filtered = df[df['GhiChu'] == filter_value]
            if len(df_filtered) > 0:
                df = df_filtered
                logger.info(f"üîç ƒê√£ l·ªçc theo ƒëi·ªÅu ki·ªán: {filter_column} = {filter_value}")
        
        total_records = len(df)
        logger.info(f"üìã T√¨m th·∫•y {total_records} ng∆∞·ªùi trong danh s√°ch")
        
        if total_records == 0:
            logger.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω!")
            return
        
        # Hi·ªÉn th·ªã danh s√°ch
        print("\nüìã DANH S√ÅCH NG∆Ø·ªúI NH·∫¨N GI·∫§Y KHEN:")
        print("-" * 80)
        print(f"{'STT':>4} | {'H·ªç v√† t√™n':25} | {'Ph√°p danh':15} | {'NƒÉm sinh':8} | {'ƒê∆°n v·ªã'}")
        print("-" * 80)
        
        for idx, row in df.iterrows():
            try:
                stt = safe_str(row.get('STT', idx+1))
                ho_ten = safe_str(row['HoTen'])
                phap_danh = safe_str(row.get('PhapDanh', ''))
                nam_sinh = safe_str(row.get('NamSinh', ''))
                don_vi = safe_str(row.get('DonVi', ''))
                
                # Format an to√†n cho vi·ªác hi·ªÉn th·ªã
                stt_num = int(float(stt)) if stt else (idx + 1)
                print(f"{stt_num:4d} | {ho_ten:25} | {phap_danh:15} | {nam_sinh:8} | {don_vi}")
                
            except Exception as e:
                logger.warning(f"L·ªói hi·ªÉn th·ªã d√≤ng {idx}: {str(e)}")
        
        print("-" * 80)
        
        # H·ªèi v·ªÅ vi·ªác ch·ªânh s·ª≠a config
        edit_config = input("B·∫°n c√≥ mu·ªën d·ª´ng l·∫°i ƒë·ªÉ ch·ªânh 'config.ini'? (y/N): ").strip().lower()
        if edit_config in ['y', 'yes']:
            print("‚û°Ô∏è H√£y m·ªü file 'config.ini', ch·ªânh xong ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh.")
            return

        # X√°c nh·∫≠n t·∫°o gi·∫•y khen
        confirm = input(f"\n‚ùì Ti·∫øn h√†nh t·∫°o {total_records} gi·∫•y khen PDF? (y/N): ").strip().lower()
        if confirm not in ['y', 'yes']:
            print("‚ùå ƒê√£ h·ªßy!")
            return

        # Kh·ªüi t·∫°o generator v·ªõi config
        generator = CertificateGenerator(template_file, logger, config)

        # Th∆∞ m·ª•c t·∫°m v√† output
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        temp_folder.mkdir(exist_ok=True)

        pdf_files = []
        success_count = 0

        print("\nüìÑ ƒêang x·ª≠ l√Ω...")
        print("-" * 60)

        for idx, row in df.iterrows():
            try:
                stt_raw = row.get('STT', idx+1)
                stt = int(float(stt_raw)) if pd.notna(stt_raw) else (idx + 1)

                ho_ten = safe_str(row['HoTen'])
                phap_danh = safe_str(row.get('PhapDanh', ''))
                nam_sinh = safe_str(row.get('NamSinh', ''))
                don_vi = safe_str(row.get('DonVi', ''))

                safe_filename = ho_ten.replace(' ', '_').replace('/', '_').replace('\\', '_')
                
                # File DOCX t·∫°m th·ªùi
                temp_word_path = temp_folder / f"{stt:03d}_{safe_filename}.docx"
                # File PDF cu·ªëi c√πng
                final_pdf_path = output_folder / f"{stt:03d}_{safe_filename}.pdf"

                print(f"  [{stt:2d}/{total_records}] ƒêang x·ª≠ l√Ω: {ho_ten}... ", end='')

                # T·∫°o DOCX t·∫°m
                docx_ok = generator.create_certificate(
                    ho_ten=ho_ten,
                    phap_danh=phap_danh,
                    nam_sinh=nam_sinh,
                    don_vi=don_vi,
                    output_file=temp_word_path
                )

                if docx_ok and temp_word_path.exists():
                    # Chuy·ªÉn sang PDF
                    pdf_ok = convert_to_pdf_safe(temp_word_path, final_pdf_path, logger)
                    
                    if pdf_ok and final_pdf_path.exists():
                        pdf_files.append(final_pdf_path)
                        success_count += 1
                        print("‚úÖ")
                    else:
                        print("‚ùå (PDF)")
                    
                    # X√≥a DOCX t·∫°m th·ªùi
                    try:
                        temp_word_path.unlink()
                    except:
                        pass
                else:
                    print("‚ùå (DOCX)")
                    
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω {row.get('HoTen', 'Unknown')}: {str(e)}")
                print("‚ùå")

        print("-" * 60)

        # G·ªôp PDF n·∫øu c√≥ v√† ƒë∆∞·ª£c c·∫•u h√¨nh
        if pdf_files and config.getboolean('OUTPUT', 'create_combined_pdf', fallback=True): 
            print(f"\nüìö ƒêang g·ªôp {len(pdf_files)} file PDF...")
            try:
                from PyPDF2 import PdfMerger
                merger = PdfMerger()
                for pdf in sorted(pdf_files):
                    merger.append(str(pdf))
        
                # X·ª≠ l√Ω t√™n file t·ª´ config - tr√°nh l·ªói % formatting
                combined_name_template = config.get('OUTPUT', 'combined_pdf_name', 
                                                  fallback='Chung_chi_%Y%m%d_%H%M%S')
                # X·ª≠ l√Ω an to√†n datetime placeholder
                try:
                    # Escape % trong ConfigParser b·∫±ng c√°ch d√πng raw string
                    if '%' in combined_name_template:
                        combined_name = datetime.now().strftime(combined_name_template)
                        logger.info(f"üïí S·ª≠ d·ª•ng datetime template: {combined_name_template}")
                    else:
                        # N·∫øu kh√¥ng c√≥ placeholder datetime, d√πng t√™n g·ªëc + timestamp
                        combined_name = f"{combined_name_template}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                        logger.info(f"üìù S·ª≠ d·ª•ng t√™n tƒ©nh + timestamp: {combined_name}")
                except (ValueError, TypeError) as e:
                    # Fallback n·∫øu template c√≥ l·ªói
                    fallback_name = f"GiayKhen_TongHop_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    combined_name = fallback_name
                    logger.warning(f"‚ö†Ô∏è Template kh√¥ng h·ª£p l·ªá '{combined_name_template}', d√πng m·∫∑c ƒë·ªãnh: {fallback_name}")
                
                combined_pdf = output_folder / f"{combined_name}.pdf"
                
                merger.write(str(combined_pdf))
                merger.close()
                logger.info(f"‚úÖ ƒê√£ g·ªôp PDF: {combined_pdf.name}")
                print(f"üìÑ File g·ªôp: {combined_pdf.name}")
                
            except ImportError:
                logger.info("üìå C√†i ƒë·∫∑t PyPDF2 ƒë·ªÉ g·ªôp c√°c file PDF")
                print("‚ö†Ô∏è C·∫ßn c√†i ƒë·∫∑t PyPDF2: pip install PyPDF2")
            except Exception as e:
                logger.warning(f"Kh√¥ng th·ªÉ g·ªôp PDF: {str(e)}")
                print(f"‚ùå L·ªói g·ªôp PDF: {str(e)}")

        # D·ªçn d·∫πp th∆∞ m·ª•c temp
        print("\nüßπ D·ªçn d·∫πp file t·∫°m...")
        try:
            for file in temp_folder.glob("*"):
                file.unlink()
        except Exception:
            pass

        # K·∫øt qu·∫£
        print("\n" + "=" * 60)
        print("‚úÖ HO√ÄN TH√ÄNH!")
        print(f"üìä ƒê√£ t·∫°o: {success_count}/{total_records} file PDF")
        print(f"üìÅ Th∆∞ m·ª•c k·∫øt qu·∫£: {output_folder}")
        print("üìã Ch·ªâ c√≥ file PDF (kh√¥ng c√≥ DOCX)")
        print("=" * 60)

        # M·ªü th∆∞ m·ª•c output
        open_folder = input("\nüóÇÔ∏è M·ªü th∆∞ m·ª•c k·∫øt qu·∫£? (y/N): ").strip().lower()
        if open_folder in ['y', 'yes']:
            try:
                import platform
                system = platform.system().lower()
                
                if system == "windows":
                    os.startfile(str(output_folder))
                elif system == "darwin":  # macOS
                    import subprocess
                    subprocess.Popen(["open", str(output_folder)])
                else:  # Linux v√† c√°c Unix-like systems
                    import subprocess
                    subprocess.Popen(["xdg-open", str(output_folder)])
                    
                print(f"üìÇ ƒê√£ m·ªü th∆∞ m·ª•c: {output_folder}")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c t·ª± ƒë·ªông: {str(e)}")
                print(f"üìÅ Vui l√≤ng m·ªü th·ªß c√¥ng: {output_folder}")

    except Exception as e:
        logger.error(f"L·ªói ch√≠nh: {str(e)}")
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}")

if __name__ == "__main__":
    main()